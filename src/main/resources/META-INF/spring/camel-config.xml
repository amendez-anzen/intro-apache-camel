<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
    http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd">

    <bean id="RestletComponent" class="org.restlet.Component"/>

    <!-- Using the Restlet servlet within a webapp -->
    <bean id="RestletComponentService" class="org.apache.camel.component.restlet.RestletComponent">
        <constructor-arg ref="RestletComponent"/>
        <property name="maxThreads" value="100"/>
    </bean>
    <!-- Registrar configuracion de properties como bean -->
    <bean id="properties" class="org.apache.camel.component.properties.PropertiesComponent">
        <property name="location" value="classpath:config.properties"/>
    </bean>

    <!-- Bean para servicio de usuarios -->
    <bean id="userService" class="mx.training.rest.service.UserService"/>

    <camelContext xmlns="http://camel.apache.org/schema/spring">

        <!-- El bindingMode define como se transmite el contenido en el cuerpo del mensaje, ejemplo: json, XML  -->
        <restConfiguration bindingMode="json" component="restlet">
            <!-- Activa formato legible a las respuestas de servicios. -->
            <dataFormatProperty key="prettyPrint" value="true"/>
        </restConfiguration>

        <!-- define los servicios REST que usan el base path /user -->
        <rest path="/users">
            <!-- Tag opcional -->
            <description>Servicio REST de usuarios</description>
            <get>
                <description>Encuentra todos los usuarios</description>
                <to uri="bean:userService?method=getAllUsers" />
            </get>
            <post type="mx.training.rest.model.User" outType="mx.training.rest.model.User">
                <description>Crea un usuario</description>
                <to uri="bean:userService?method=createUser"/>
            </post>
            <get uri="/{id}" outType="mx.training.rest.model.User">
                <description>Obtener un usuario por su id</description>
                <param name="id" type="path" dataType="int" description="Id de usuario"/>
                <to uri="bean:userService?method=getUser(${header.id})"/>
            </get>
            <put type="mx.training.rest.model.User" outType="mx.training.rest.model.User">
                <description>Actualiza la informacion de un usuario</description>
                <to uri="bean:userService?method=updateUser"/>
            </put>
            <delete uri="/{id}">
                <description>Elimina el usuario con el id especificado</description>
                <param name="id" type="path" dataType="int"/>
                <to uri="bean:userService?method=deleteUser(${header.id})"/>
            </delete>
        </rest>

        <rest>
            <get uri="/demo/{id}">
                <route>
                    <transform>
                        <simple>Request type : ${header.CamelHttpMethod} and ID : ${header.id}</simple>
                    </transform>
                </route>
            </get>
        </rest>
    	<rest>
    	   <post uri="/persons">
    	      <to uri="direct:postPersons"/>
           </post>
           <get uri="/persons">
              <to uri="direct:getPersons"/>
           </get>
           <get uri="/persons/{personId}">
               <!-- <to uri="direct:getPersonId"/> -->
                <to uri="direct:retrievePersonById"/>
           </get>
           <put uri="/persons/{personId}">
               <!-- <to uri="direct:putPersonId"/> -->
               <to uri="direct:retrievePersonById"/>
           </put>
           <delete uri="/persons/{personId}">
               <!-- <to uri="direct:deletePersonId"/> -->
               <to uri="direct:retrievePersonById"/>
           </delete>    
        </rest>

        <route>
            <from uri="direct:getPersons"/>
            <setBody>
                <constant>This should retrieve all persons</constant>
            </setBody>
        </route>
        <route>
            <from uri="direct:postPersons"/>
            <setBody>
                <constant>This should retrieve all persons</constant>
            </setBody>
        </route>
        <route>
            <from uri="direct:retrievePersonById"/>
            <setBody>
                <simple>Person with id ${header.personId}</simple>
            </setBody>
        </route>

        <!-- Camel como un proxy HTTP entre cliente y servidor -->
        <route>
            <from uri="jetty:{{camel-proxy-endpoint}}?matchOnUriPrefix=true"/>
            <to uri="jetty:{{accitrade-rest-endpoint}}?bridgeEndpoint=true&amp;throwExceptionOnFailure=false"/>
        </route>
    </camelContext>

</beans>